# -*- coding: utf-8 -*-
"""openai-Stockanalysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e0-1R4L7ez4TcJfxHFusLF_bGR1bsdHY
"""

!pip install openai
!pip install yfinance
!pip install mplfinance
import mplfinance as mpf
from openai import OpenAI, OpenAIError
import yfinance as yf
import pandas as pd #
import datetime as dt

stock_id = "META"
end = dt.date.today() # end time
start = end - dt.timedelta(days =180) # start time
StockData = yf.download(stock_id, start , end).reset_index()

"""Use OpenAI to write calculate function"""

import getpass
api_key = ""
client = OpenAI(api_key = api_key)

def get_reply(messages):
  try:
    response = client.chat.completions.create(model="gpt-3.5-turbo", messages=messages)
    reply = response.choices[0].message.content
  except OpenAIError as err:
    reply = f"發生 {err.type} 錯誤\n{err.message}"
  return reply
def ai_helper(StockData, user_msg):
  msg = [{"role":"system","content":
      f"I require your assistance in generating Python code based on specific user requirements.\
      Your need to carefully analyze user's requirements and generate the Python code.\
      I will provide you with a dataframe (StockData) that follows the format {StockData.columns}.\
      Please note that your response should solely consist of the code itself,and no additional information should be included."},
      {"role":"user","content":
      f"The user requirement:{user_msg} \n\
      Your task is to develop a Python function named \
      'calculate(StockData)'. This function should accept a dataframe as \
      its parameter. Ensure that you only utilize the columns \
      present in the dataset, specifically {StockData.columns}. \
      After processing, the function should return the processed \
      dataframe. Your response should strictly contain the Python \
      code for the 'calculate(StockData)' function \
      and exclude any unrelated content."
      }]
  reply_data = get_reply(msg)
  cleaned_code = reply_data.replace("```","")
  cleaned_code = cleaned_code.replace("python","")

  return cleaned_code

code_str = ai_helper(StockData,"1. calculate MACD and named it as MACD_Histogram, 2. Calculating Bollinger Bands and named it as Upper_Band and Lower_Band")
# customize your need
print(code_str)
exec(code_str)
new_StockData = calculate(StockData) ## AI generated code
new_StockData.tail()

kplot_StockData = new_StockData.set_index('Date')
end = dt.date.today() # end time
start = end - dt.timedelta(days =180) # start time
kplot_StockData = kplot_StockData[start:end]
kplot_StockData.tail()
# set drawing style
my_color = mpf.make_marketcolors(up='r', down='g', inherit=True)
my_style = mpf.make_mpf_style(base_mpf_style='yahoo',marketcolors=my_color)

ap = [
mpf.make_addplot(kplot_StockData['Upper_Band'], color='red',alpha=0.5, linestyle='--'),
mpf.make_addplot(kplot_StockData['Lower_Band'], color='red',alpha=0.5, linestyle='--'),
mpf.make_addplot(kplot_StockData['Volume'], panel=1, type='bar',color='g', alpha=0.5, ylabel='Volume'),
mpf.make_addplot(kplot_StockData['MACD_Histogram'], panel=2, type='bar',color='r', alpha=0.5, ylabel='MACD')]
mpf.plot(kplot_StockData, type='candle', addplot=ap,style=my_style, title=f'{stock_id}')